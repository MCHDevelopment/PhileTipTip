CREATE TABLE meldungen (
    meldungsId INT AUTO_INCREMENT PRIMARY KEY,
    localUriString VARCHAR(255),
    remoteUrlString VARCHAR(255),
    melderId INT NOT NULL,
    hausNummer INT,
    ort VARCHAR(100),
    postleitzahl INT,
    strasse VARCHAR(100),
    meldungsart VARCHAR(100) NOT NULL,
    meldungstext TEXT,
    latitude DECIMAL(9, 6),   -- Speichert die Breite
    longitude DECIMAL(9, 6)   -- Speichert die Länge
);

CREATE TABLE adressen (
    adressId INT AUTO_INCREMENT PRIMARY KEY,
    strasse VARCHAR(100),
    hausNummer VARCHAR(10),
    postleitzahl VARCHAR(10),
    ort VARCHAR(100)
);

CREATE TABLE kontakte (
    kontaktId INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    telefonnummer VARCHAR(20),
    email VARCHAR(100),
    adressId INT,
    FOREIGN KEY (adressId) REFERENCES adressen(adressId) ON DELETE SET NULL
);

CREATE TABLE nutzer (
    nutzerId INT AUTO_INCREMENT PRIMARY KEY,
    nutzerTyp ENUM('Mieter', 'Mitarbeiter', 'Eigentümer') NOT NULL
);

CREATE TABLE mieter (
    mieterId INT AUTO_INCREMENT PRIMARY KEY,
    nutzerId INT UNIQUE, -- nur ein Mieter pro Nutzer möglich
    kontaktId INT,
    FOREIGN KEY (nutzerId) REFERENCES nutzer(nutzerId),
    FOREIGN KEY (kontaktId) REFERENCES kontakte(kontaktId)
);

CREATE TABLE eigentuemer (
    eigentuemerId INT AUTO_INCREMENT PRIMARY KEY,
    nutzerId INT UNIQUE, -- nur ein Eigentümer pro Nutzer möglich
    kontaktId INT,
    FOREIGN KEY (nutzerId) REFERENCES nutzer(nutzerId),
    FOREIGN KEY (kontaktId) REFERENCES kontakte(kontaktId)
);

CREATE TABLE mitarbeiter (
    mitarbeiterId INT AUTO_INCREMENT PRIMARY KEY,
    nutzerId INT UNIQUE, -- nur ein Mitarbeiter pro Nutzer möglich
    kontaktId INT,
    FOREIGN KEY (nutzerId) REFERENCES nutzer(nutzerId),
    FOREIGN KEY (kontaktId) REFERENCES kontakte(kontaktId)
);

-- Wohnanlage Tabelle
CREATE TABLE wohnanlage (
    wohnanlageId INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    adressId INT,
    FOREIGN KEY (adressId) REFERENCES adressen(adressId) -- Optional: Verknüpfung zur Adresse der Wohnanlage
);

-- Gebäude Tabelle mit Verknüpfung zur Wohnanlage
CREATE TABLE gebaeude (
    gebaeudeId INT AUTO_INCREMENT PRIMARY KEY,
    wohnanlageId INT, -- Neue Spalte für die Verknüpfung zur Wohnanlage
    name VARCHAR(100),
    adressId INT,
    FOREIGN KEY (wohnanlageId) REFERENCES wohnanlage(wohnanlageId) ON DELETE SET NULL, -- Gebäude bleibt bestehen, wenn Wohnanlage gelöscht wird
    FOREIGN KEY (adressId) REFERENCES adressen(adressId)
);

-- Verknüpfungstabelle für Wohnanlage - Eigentümer
CREATE TABLE wohnanlage_eigentuemer (
    wohnanlageId INT,
    eigentuemerId INT,
    PRIMARY KEY (wohnanlageId, eigentuemerId),
    FOREIGN KEY (wohnanlageId) REFERENCES wohnanlage(wohnanlageId) ON DELETE CASCADE,
    FOREIGN KEY (eigentuemerId) REFERENCES eigentuemer(eigentuemerId) ON DELETE CASCADE
);

CREATE TABLE eigentuemer_gebaeude (
    eigentuemerId INT,
    gebaeudeId INT,
    PRIMARY KEY (eigentuemerId, gebaeudeId),
    FOREIGN KEY (eigentuemerId) REFERENCES eigentuemer(eigentuemerId) ON DELETE CASCADE,
    FOREIGN KEY (gebaeudeId) REFERENCES gebaeude(gebaeudeId) ON DELETE CASCADE
);

CREATE TABLE wohnung (
    wohnungId INT AUTO_INCREMENT PRIMARY KEY,
    gebaeudeId INT NOT NULL,
    wohnungsnummer VARCHAR(10) NOT NULL, -- z. B. Wohnung Nr., Stockwerk o. Ä.
    flaeche DECIMAL(10, 2), -- Quadratmeterangabe für die Fläche der Wohnung
    zimmeranzahl INT,
    FOREIGN KEY (gebaeudeId) REFERENCES gebaeude(gebaeudeId)
);

CREATE TABLE wohnung_mieter (
    wohnungId INT,
    mieterId INT,
    PRIMARY KEY (wohnungId, mieterId),
    FOREIGN KEY (wohnungId) REFERENCES wohnung(wohnungId) ON DELETE CASCADE,
    FOREIGN KEY (mieterId) REFERENCES mieter(mieterId) ON DELETE CASCADE
);

CREATE TABLE wohnung_eigentuemer (
    wohnungId INT,
    eigentuemerId INT,
    PRIMARY KEY (wohnungId, eigentuemerId),
    FOREIGN KEY (wohnungId) REFERENCES wohnung(wohnungId) ON DELETE CASCADE,
    FOREIGN KEY (eigentuemerId) REFERENCES eigentuemer(eigentuemerId) ON DELETE CASCADE
);

-- Tabelle für die Teams
CREATE TABLE teams (
    teamId INT AUTO_INCREMENT PRIMARY KEY,
    teamName VARCHAR(100) NOT NULL
);

-- Verknüpfungstabelle für Teamleiter
CREATE TABLE teamleiter (
    teamleiterId INT AUTO_INCREMENT PRIMARY KEY,
    mitarbeiterId INT,
    teamId INT,
    FOREIGN KEY (mitarbeiterId) REFERENCES mitarbeiter(mitarbeiterId),
    FOREIGN KEY (teamId) REFERENCES teams(teamId)
);

-- Verknüpfungstabelle für Team-Mitglieder
CREATE TABLE team_mitglieder (
    team_mitgliedId INT AUTO_INCREMENT PRIMARY KEY,
    mitarbeiterId INT,
    teamId INT,
    FOREIGN KEY (mitarbeiterId) REFERENCES mitarbeiter(mitarbeiterId),
    FOREIGN KEY (teamId) REFERENCES teams(teamId)
);
